% uses GPML toolkit (http://www.gaussianprocess.org/gpml/code/)

% predictable results
rng(31415);

% plot colors (from http://colorbrewer2.org/)
colors = [ 31, 120, 180; ...
           51, 160,  44; ...
          227,  26,  28; ...
          166, 206, 227] / 255;

sample_colors = ...
    [252, 146, 114; ...
     251, 106,  74; ...
     239,  59,  44; ...
     203,  24,  29; ...
     165,  15,  21] / 255;

% where figure output should go
figures_directory = 'figures/';

n_star      = 1000; % number of test points
sigma_n     = 0.1; % noise scale
num_samples = 3; % number of GP samples to take

% parameters of K
lambda      = 1;   % output scale
ell         = 1;   % length scale

theta.cov = [log(ell); log(lambda)];

x_star = linspace(0, 10, n_star)';

prior_mu = zeros(n_star, 1);
prior_K  = covSEiso(theta.cov, x_star);

samples = mvnrnd(prior_mu, prior_K, num_samples)';

clf;
hold('off');
for i = 1:num_samples
  samples_h = ...
      plot(x_star, samples(:, i), ...
           'color', sample_colors(i, :));
  hold('on');
end
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [prior_mu - 2 * sqrt(diag(prior_K));
          flipud(prior_mu + 2 * sqrt(diag(prior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
mean_h = ...
    plot(x_star, prior_mu, ...
         'color', colors(1, :));

ylim([-3, 3]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, samples_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sqrt{K(x, x)}$', ...
       'samples',               ...
       'location', 'northeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'samples_example_1';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

x = [0.5; 1.75; 3.5; 5.5; 6.5];
y = [-1; -2; 0.5; 1; 0.75];

n = numel(x);

% K(X, X)
Kxx = covSEiso(theta.cov, x);
% K(X, X_*)
Kxs = covSEiso(theta.cov, x, x_star);
% K(X_*, K_*)
Kss = covSEiso(theta.cov, x_star);

% posterior distribution for y*
posterior_mu = Kxs' / Kxx * y;
posterior_K  = Kss - Kxs' / Kxx * Kxs;
posterior_K  = (posterior_K + posterior_K') / 2;

samples = mvnrnd(posterior_mu, posterior_K, num_samples)';

clf;
hold('off');
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [posterior_mu - 2 * sqrt(diag(posterior_K));
          flipud(posterior_mu + 2 * sqrt(diag(posterior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
hold('on');
mean_h = ...
    plot(x_star, posterior_mu, ...
         'color', colors(1, :));
observations_h = plot(x, y, 'k.');

ylim([-3, 3]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, observations_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sigma$', ...
       'observations',          ...
       'location', 'northeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'example_posterior';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

clf;
hold('off');
for i = 1:num_samples
  samples_h = ...
      plot(x_star, samples(:, i), ...
           'color', sample_colors(i, :));
  hold('on');
end
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [posterior_mu - 2 * sqrt(diag(posterior_K));
          flipud(posterior_mu + 2 * sqrt(diag(posterior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
mean_h = ...
    plot(x_star, posterior_mu, ...
         'color', colors(1, :));
observations_h = plot(x, y, 'k.');

ylim([-3, 3]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, samples_h, observations_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sigma$', ...
       'samples',               ...
       'observations',          ...
       'location', 'northeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'example_posterior_samples';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

sigma = 0.1;

% posterior distribution for y*
posterior_mu = Kxs' / (Kxx + sigma^2 * eye(n)) * y;
posterior_K  = Kss - Kxs' / (Kxx + sigma^2 * eye(n)) * Kxs;
posterior_K  = (posterior_K + posterior_K') / 2;

samples = mvnrnd(posterior_mu, posterior_K, num_samples)';

clf;
hold('off');
for i = 1:num_samples
  samples_h = ...
      plot(x_star, samples(:, i), ...
           'color', sample_colors(i, :));
  hold('on');
end
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [posterior_mu - 2 * sqrt(diag(posterior_K));
          flipud(posterior_mu + 2 * sqrt(diag(posterior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
mean_h = ...
    plot(x_star, posterior_mu, ...
         'color', colors(1, :));
observations_h = plot(x, y, 'k.');

ylim([-3, 3]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, samples_h, observations_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sigma$', ...
       'samples',               ...
       'observations',          ...
       'location', 'northeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'noisy_posterior';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

sigma = 0.5;

% posterior distribution for y*
posterior_mu = Kxs' / (Kxx + sigma^2 * eye(n)) * y;
posterior_K  = Kss - Kxs' / (Kxx + sigma^2 * eye(n)) * Kxs;
posterior_K  = (posterior_K + posterior_K') / 2;

samples = mvnrnd(posterior_mu, posterior_K, num_samples)';

clf;
hold('off');
for i = 1:num_samples
  samples_h = ...
      plot(x_star, samples(:, i), ...
           'color', sample_colors(i, :));
  hold('on');
end
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [posterior_mu - 2 * sqrt(diag(posterior_K));
          flipud(posterior_mu + 2 * sqrt(diag(posterior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
mean_h = ...
    plot(x_star, posterior_mu, ...
         'color', colors(1, :));
observations_h = plot(x, y, 'k.');

ylim([-3, 3]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, samples_h, observations_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sigma$', ...
       'samples',               ...
       'observations',          ...
       'location', 'northeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'really_noisy_posterior';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

% parameters of K
lambda      = 1/2;   % output scale
ell         = 2;     % length scale

theta.cov = [log(ell); log(lambda)];

prior_mu = zeros(n_star, 1);
prior_K  = covSEiso(theta.cov, x_star);

samples = mvnrnd(prior_mu, prior_K, num_samples)';

clf;
hold('off');
for i = 1:num_samples
  samples_h = ...
      plot(x_star, samples(:, i), ...
           'color', sample_colors(i, :));
  hold('on');
end
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [prior_mu - 2 * sqrt(diag(prior_K));
          flipud(prior_mu + 2 * sqrt(diag(prior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
mean_h = ...
    plot(x_star, prior_mu, ...
         'color', colors(1, :));

ylim([-3, 3]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, samples_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sigma$', ...
       'samples',               ...
       'location', 'northeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'samples_example_2';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

% parameters of K
lambda      = 1;   % output scale
ell         = 1;   % length scale

theta.cov = [log(ell); log(lambda)];

prior_mu = zeros(n_star, 1);
prior_K  = covMaterniso(1, theta.cov, x_star) + 1e-6 * eye(n_star);
prior_K  = (prior_K + prior_K') / 2;

samples = mvnrnd(prior_mu, prior_K, num_samples)';

clf;
hold('off');
for i = 1:num_samples
  samples_h = ...
      plot(x_star, samples(:, i), ...
           'color', sample_colors(i, :));
  hold('on');
end
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [prior_mu - 2 * sqrt(diag(prior_K));
          flipud(prior_mu + 2 * sqrt(diag(prior_K)))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
mean_h = ...
    plot(x_star, prior_mu, ...
         'color', colors(1, :));

ylim([-4, 4]);

set(gca, 'box', 'off');

xlabel('$x$');

legend([mean_h, sigma_h, samples_h], ...
       '$\mu(x)$',              ...
       '$\pm 2\sigma$', ...
       'samples',               ...
       'location', 'southeast');
legend('boxoff');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'samples_example_3';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraAxisOptions', 'legend style={legend columns=-1, draw=none}, reverse legend', ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

n = 25;
sigma = 1 / 5;

x = rand(n, 1) * range(x_star) + min(x_star);

% parameters of K
lambda      = 1;   % output scale
ell         = 1;   % length scale

theta.cov = [log(ell); log(lambda)];
theta.lik = log(sigma);

rng('default');
y = mvnrnd(zeros(n, 1), covSEiso(theta.cov, x))' + sigma * randn(size(x));

[nlZ, ~, posterior] = ...
    gp(theta, [], [], @covSEiso, [], x, y);

nlZ

[~, ~, posterior_mean, posterior_variance] = ...
    gp(theta, [], [], @covSEiso, [], x, posterior, x_star);

clf;
hold('off');
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [posterior_mean - 2 * sqrt(posterior_variance);
          flipud(posterior_mean + 2 * sqrt(posterior_variance))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
hold('on');
mean_h = ...
    plot(x_star, posterior_mean, ...
         'color', colors(1, :));
observations_h = plot(x, y, 'k.');

ylim([-4, 5]);

set(gca, 'box', 'off');

xlabel('$x$');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'hp_demo_good';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

sigma = 1 / 20;

% parameters of K
lambda      = 2; % output scale
ell         = 1 / 3; % length scale

theta.cov = [log(ell); log(lambda)];
theta.lik = log(sigma);

[nlZ, ~, posterior] = ...
    gp(theta, [], [], @covSEiso, [], x, y);

[~, ~, posterior_mean, posterior_variance] = ...
    gp(theta, [], [], @covSEiso, [], x, posterior, x_star);

clf;
hold('off');
sigma_h = ...
    fill([x_star; flipud(x_star)], ...
         [posterior_mean - 2 * sqrt(posterior_variance);
          flipud(posterior_mean + 2 * sqrt(posterior_variance))], ...
         colors(4, :), ...
         'edgecolor', 'none', ...
         'facealpha', 0.3);
hold('on');
mean_h = ...
    plot(x_star, posterior_mean, ...
         'color', colors(1, :));
observations_h = plot(x, y, 'k.');

ylim([-4, 5]);

set(gca, 'box', 'off');

xlabel('$x$');

% make tikz plot if possible
if (exist('matlab2tikz', 'file'))
  figure_name = 'hp_demo_bad';
  matlab2tikz(sprintf('%s/%s.tex', figures_directory, figure_name), ...
              'height',       '\figureheight', ...
              'width',        '\figurewidth',  ...
              'parseStrings', false,           ...
              'showInfo',     false,           ...
              'extraCode',    sprintf('\\tikzsetnextfilename{%s}', figure_name));
end

nlZ